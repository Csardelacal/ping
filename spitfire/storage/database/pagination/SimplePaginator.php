<?php namespace spitfire\storage\database\pagination;

/* 
 * The MIT License
 *
 * Copyright 2018 CÃ©sar de la Cal Bretschneider <cesar@magic3w.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

class SimplePaginator implements PaginationInterface
{
	
	/**
	 *
	 * @var \spitfire\core\http\URL
	 */
	private $url;
	private $parameter;
	
	public function __construct(\spitfire\core\http\URL $url, $parameter) {
		$this->url = $url;
		$this->parameter = $parameter;
	}

	public function after() {
		return '</ul>';
	}

	public function before() {
		return '<ul class="pagination">';
	}

	public function current() {
		return isset($_GET[$this->parameter]) && is_numeric($_GET[$this->parameter])? (int)$_GET[$this->parameter] : 1;
	}

	public function emptyResultMessage() {
		return '<!--Automatically generated by Pagination::getEmpty()-->'
		. '<div style="text-align:center; padding: 30px 0; font-size: .8em; color: #777">'
			. '<em>No results to display&hellip;</em>'
		. '</div>'
		. '<!---Automatically generated by Pagination::getEmpty()-->';
	}

	public function first() {
		return '';
	}

	public function last($number) {
		return '';
	}

	public function next($disabled = false) {
		if ($disabled) {
			return '<li><a class="disabled unavailable">&raquo;</a></li>';
		}
		
		$url = clone $this->url;
		$url->setParam($this->parameter, $this->current() + 1);
		
		return sprintf('<li><a href="%s">&raquo;</a></li>', $url);
	}

	public function page($number) {
		$url = clone $this->url;
		$url->setParam($this->parameter, $number);
		
		return sprintf('<li><a href="%s">%s</a></li>', $url, $number);
	}

	public function previous($disabled = false) {
		if ($disabled) {
			return '<li><a class="disabled unavailable">&laquo;</a></li>';
		}
		
		$url = clone $this->url;
		$url->setParam($this->parameter, $this->current() - 1);
		
		return sprintf('<li><a href="%s">&laquo;</a></li>', $url);
	}

	public function gap() {
		return sprintf('<li class="disabled unavailable"><a>...</a></li>');
	}

	public function jumpTo($total) {
		return '';
	}

	public function pageOf($total) {
		return '';
	}

}
